[project]
name = "pytest_time"
dynamic = ["version", "readme"]
dependencies = [
    "pytest",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: Pytest",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Testing :: Unit",
]
requires-python = ">=3.8"

[project.entry-points.pytest11]
pytest_time = "pytest_time"

[project.optional-dependencies]
dev = [
    "coverage[toml]==7.2.7",
    "hypothesis>=6.78",
    "pytest==7.3.1",
    "pytest-check",
    "pytest-cov==4.1.0",
    "pytest-mock==3.10.0",
]
lint = [
    "black>=23.3.0,<24",
    "codespell[toml]>=2.2.4,<3",
    "rstcheck[sphinx,toml]>=6.0.0,<7",
    "ruff==0.0.275",
    "yamllint>=1.32.0,<2"
]
types = [
    "mypy[reports]>=1.3.0,<2",
    "pyright==1.1.311",
]

[build-system]
requires = [
    "setuptools>=67.7.2",
    "setuptools_scm[toml]>=7.1"
]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.dynamic]
readme = {file = "README.rst"}

[tool.setuptools_scm]
write_to = "src/pytest_time/_version.py"

[tool.black]
target-version = ["py38"]

[tool.codespell]
skip = ".tox,.git,build,.*_cache,__pycache__,./docs/_build,.direnv,.venv,venv"
quiet-level = 3
check-filenames = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = "tests"
xfail_strict = true
pytester_example_dir = "pytester"

[tool.coverage.run]
branch = true
parallel = true
omit = ["tests/**"]

[tool.coverage.report]
skip_empty = true

[tool.pyright]
strict = ["pytest_time"]
pythonVersion = "3.8"
pythonPlatform = "Linux"

[tool.mypy]
python_version = "3.8"
packages = ["pytest_time", "tests"]
warn_unused_configs = true
warn_redundant_casts = true
strict_equality = true
strict_concatenate = true
warn_return_any = true
disallow_subclassing_any = true
disallow_untyped_decorators = true
disallow_any_generics = true
disallow_untyped_defs = true
no_implicit_optional = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "pytest_check"
ignore_missing_imports = true

[tool.ruff]
line-length = 88
target-version = "py38"
src = ["src", "tests"]
extend-exclude = [
    "docs",
    "__pycache__",
]
# Follow ST063 - Maintaining and updating linting specifications for updating these.
select = [  # Base linting rule selections.
    # See the internal document for discussion:
    # https://docs.google.com/document/d/1i1n8pDmFmWi4wTDpk-JfnWCVUThPJiggyPi2DYwBBu4/edit
    # All sections here are stable in ruff and shouldn't randomly introduce
    # failures with ruff updates.
    "F",  # The rules built into Flake8
    "E", "W",  # pycodestyle errors and warnings
    "I",  # isort checking
    "N",  # PEP8 naming
    "D",  # Implement pydocstyle checking as well.
    "UP",  # Pyupgrade - note that some of are excluded below due to Python versions
    "YTT",  # flake8-2020: Misuse of `sys.version` and `sys.version_info`
    "ANN",  # Type annotations.
    "BLE",  # Do not catch blind exceptions
    "FBT",  # Disallow boolean positional arguments (make them keyword-only)
    "B0",  # Common mistakes and typos.
    "A",  # Shadowing built-ins.
    "C4", # Encourage comprehensions, which tend to be faster than alternatives.
    "T10",  # Don't call the debugger in production code
    "ISC",  # Implicit string concatenation that can cause subtle issues
    "ICN",  # Only use common conventions for import aliases.
    "INP",  # Implicit namespace packages
    "PYI",  # Linting for type stubs.
    "PT",  # Pytest
    "Q",  # Consistent quotations
    "RSE",  # Errors on pytest raises.
    "RET",  # Simpler logic after return, raise, continue or break
    "SIM",  # Code simplification
    "TCH",  # Guard imports only used for type checking behind a type-checkning block.
    "ARG",  # Unused arguments
    "PTH",  # Migrate to pathlib
    "ERA",  # Don't check in commented out code
    "PGH",  # Pygrep hooks
    "PL",  # Pylint
    "TRY",  # Cleaner try/except,
]
extend-select = [
    # flake8-bandit: security testing. https://github.com/charliermarsh/ruff#flake8-bandit-s
    # https://bandit.readthedocs.io/en/latest/plugins/index.html#complete-test-plugin-listing
    "S101", "S102",  # assert or exec
    "S103", "S108",  # File permissions and tempfiles - use #noqa to silence when appropriate.
    "S104",  # Network binds
    "S105", "S106", "S107",  # Hardcoded passwords
    "S110",  # try-except-pass (use contextlib.suppress instead)
    "S113",  # Requests calls without timeouts
    "S3",  # Serialising, deserialising, hashing, crypto, etc.
    "S506",  # Unsafe YAML load
    "S508", "S509",  # Insecure SNMP
    "S701",  # jinja2 templates without autoescape
    "RUF001", "RUF002", "RUF003",  # Ambiguous unicode characters
    "RUF005",  # Encourages unpacking rather than concatenation
    "RUF008",  # Do not use mutable default values for dataclass attributes
    "RUF100",  # #noqa directive that doesn't flag anything
]
ignore = [
    "ANN10",  # Type annotations for `self` and `cls`
    "E501",  # Line too long (reason: black will automatically fix this for us)
    "D105",  # Missing docstring in magic method (reason: magic methods already have definitions)
    "D107",  # Missing docstring in __init__ (reason: documented in class docstring)
    "D203",  # 1 blank line required before class docstring (reason: pep257 default)
    "D213",  # Multi-line docstring summary should start at the second line (reason: pep257 default)
    "D215",  # Section underline is over-indented (reason: pep257 default)
    "A003",  # Class attribute shadowing built-in (reason: Class attributes don't often get bare references)
]

[tool.ruff.per-file-ignores]
"test_*.py" = [  # Some things we want for the moin project are unnecessary in tests.
    "D",  # Ignore docstring rules in tests
    "ANN", # Ignore type annotations in tests
    "S101",  # Allow assertions in tests
    "S103", # Allow `os.chmod` setting a permissive mask `0o555` on file or directory
    "S108", # Allow Probable insecure usage of temporary file or directory
    "PLR0913",  # Allow many arguments for test functions
    "PLR2004",  # Allow magic values in tests
]
# isort leaves init files alone by default, this makes ruff ignore them too.
"__init__.py" = ["I001"]
